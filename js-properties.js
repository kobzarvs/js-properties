// Generated by CoffeeScript 1.3.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  this.Properties = (function() {
    var HOOK_FUNCTIONS;

    Properties.name = 'Properties';

    function Properties() {}

    HOOK_FUNCTIONS = ['get', 'set', 'before_get', 'after_get', 'before_set', 'after_set'];

    Properties.prototype.property = function(pname, desc) {
      var description, foo, _i, _len;
      if (__indexOf.call(HOOK_FUNCTIONS, pname) >= 0) {
        return null;
      }
      if (desc.get == null) {
        desc.get = function() {
          return this._prop[pname];
        };
      }
      if (desc.set == null) {
        desc.set = function(val) {
          return this._prop[pname] = val;
        };
      }
      for (_i = 0, _len = HOOK_FUNCTIONS.length; _i < _len; _i++) {
        foo = HOOK_FUNCTIONS[_i];
        if (desc[foo] != null) {
          desc[foo] = desc[foo].bind(this);
        }
      }
      description = {};
      description.get = function() {
        var result;
        if (typeof desc.before_get === "function") {
          desc.before_get();
        }
        result = desc.get();
        if (typeof desc.after_get === "function") {
          desc.after_get();
        }
        return result;
      };
      description.set = function(val) {
        if (typeof desc.before_set === "function") {
          desc.before_set(val);
        }
        desc.set(val);
        if (typeof desc.after_set === "function") {
          desc.after_set(val);
        }
        return val;
      };
      if (this._prop == null) {
        this._prop = {};
      }
      this._prop[pname] = null;
      Object.defineProperty(this, pname, description);
      return this._prop;
    };

    Properties.prototype.create_context = function() {
      return new ((function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        return _Class;

      })(Properties));
    };

    Properties.prototype.properties = function(plist) {
      var k, p_list, v, _results;
      _results = [];
      for (k in plist) {
        v = plist[k];
        if (typeof v === 'object') {
          p_list = this.property(k, v);
          if (p_list != null) {
            p_list[k] = this.create_context();
            this.properties.call(p_list[k], v);
            if (!p_list[k]._prop) {
              _results.push(p_list[k] = null);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Properties.prototype.to_JSON = function() {
      var json, name, value, _ref;
      if (this._prop == null) {
        return null;
      }
      json = {};
      _ref = this._prop;
      for (name in _ref) {
        value = _ref[name];
        json[name] = typeof value === 'object' ? this.to_JSON.call(value) : value;
      }
      return json;
    };

    return Properties;

  })();

}).call(this);
